{"entries":[{"timestamp":1732481698293,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"\n"]],"start1":0,"start2":0,"length1":0,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"  \"main."],[-1,"t"],[1,"block"],[0,"s\",\n    "]],"start1":172,"start2":172,"length1":17,"length2":21},{"diffs":[[0,"   \""],[-1,"README.md\",\n        \"thermalPr"],[1,"ma"],[0,"in"],[-1,"t"],[0,".ts\""]],"start1":194,"start2":194,"length1":41,"length2":12},{"diffs":[[0,"n.ts\",\n        \""],[-1,"test.ts"],[1,"README.md"],[0,"\"\n    ],\n    \"te"]],"start1":201,"start2":201,"length1":39,"length2":41},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":236,"start2":236,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// Add your code here\n"},{"type":"added","filename":"thermalPrint.ts","value":"/**\n* Makecode block for thermal printer\n*/\n\nnamespace thermalPrint {\n\n\n    let heatTime: number\n    heatTime = 80          //80 is default. Controls speed of printing and darkness\n    let heatInterval: number\n    heatInterval = 2      //2 is default. Controls speed of printing and darkness\n    let printDensity: number\n    printDensity = 15       //Not sure what the defaut is. Testing shows the max helps darken text. From page 23.\n    let printBreakTime: number\n    printBreakTime = 15     //Not sure what the defaut is. Testing shows the max helps darken text. From page 23.\n\n    export enum bgColor {\n\n        //%block=\"White\"\n        White = 0,\n        //%block=\"Black\"\n        Black = 1\n    }\n\n    export enum textBold {\n\n        //%block=\"Off\"\n        Off = 0,\n        //%block=\"On\"\n        On = 1\n    }\n\n\n    export enum textAlignment {\n\n        //%block=\"Left\"\n        Left = 48,\n        //%block=\"Centre\"\n        Centre = 49,\n        //%block=\"Right\"\n        Right = 50\n    }\n\n    export enum textunderline {\n\n        //%block=\"Off\"\n        Off = 48,\n        //%block=\"Light\"\n        Light = 49,\n        //%block=\"Dark\"\n        Dark = 50\n    }\n\n    /**\n     * Initialize Thermal Printer\n     * @param Configure pin for serial communication\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_setSerial\" block=\"Connect printer RX to %pinRX|TX to %pinTX\"\n    //% weight=100 blockExternalInputs=true blockGap=3\n    export function thermal_printer_setSerial(pinRX: SerialPin, pinTX: SerialPin, baudrate: BaudRate): void {\n\n        serial.redirect(\n            pinRX,\n            pinTX,\n            BaudRate.BaudRate9600\n        )\n        basic.pause(500)\n\n        let dataBuffer0 = pins.createBuffer(2)\n        dataBuffer0.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer0.setNumber(NumberFormat.UInt8LE, 1, 64)  //reset to default\n        serial.writeBuffer(dataBuffer0)\n\n        basic.pause(100)\n\n        let dataBuffer = pins.createBuffer(8)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)       //0x1B\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 55)       //0x37\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 7)        //default 64 dots\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 3, heatTime) //default 80\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 4, heatInterval) //default 2 or 20us\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 5, 18)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 6, 35)\n        let printSetting = (printDensity << 4) | printBreakTime\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 7, printSetting)\n\n        serial.writeBuffer(dataBuffer)\n        basic.pause(500)\n    }\n\n    /**\n     * Print string and line feed\n     * @param s is string to be printed, eg: \"Hello\"\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_printString\" block=\"Print string %s\"\n    //% weight=98 blockGap=3\n    export function printString(s: string): void {\n        let dataBuffer = pins.createBuffer(1)\n\n        serial.writeString(s)\n\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 10) //line feed\n        serial.writeBuffer(dataBuffer)\n    }\n\n    /**\n     * Print number and line feed\n     * @param num is number to be printed, eg: 123\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_printNum\" block=\"Print number %num\"\n    //% weight=97 blockGap=3\n    export function printNum(num: number): void {\n        let dataBuffer = pins.createBuffer(1)\n\n        serial.writeNumber(num)\n\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 10) //line feed\n        serial.writeBuffer(dataBuffer)\n    }\n\n\n    /**\n     * Store text in printer memory. Require \"New line\" command to print\n     * @param s is string to be stored, eg: \"Hello World\"\n     * @param text will be stored in printer buffer. - you need to send a newLine command to empty buffer and print\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_printStringBuffer\" block=\"Store string in memory %s\"\n    //% weight=96 blockGap=3\n    export function printStringBuffer(s: string): void {\n        serial.writeString(s)\n    }\n\n    /**\n     * Store number in printer memory. Require \"New line\" command to print\n     * @param num is number to be stored, eg: 123\n     * @param number will be stored in printer buffer. - you need to send a newLine command to empty buffer and print\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_printNumBuffer\" block=\"Store number in memory %s\"\n    //% weight=95 blockGap=3\n    export function printNumBuffer(num: number): void {\n        serial.writeNumber(num)\n    }\n\n    /**\n     * New Line\n     * @param Sending line feed to the printer\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_newLine\" block=\"New line\"\n    //% weight=90 blockGap=20\n    export function LineFeed(): void {\n        let dataBuffer = pins.createBuffer(1)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 10) //send LF\n        serial.writeBuffer(dataBuffer)\n    }\n\n    /**\n     * Reset printer\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_resetPrint\" block=\"Reset printer\"\n    //% weight=20 blockGap=3\n    export function resetPrinter(): void {\n        let dataBuffer = pins.createBuffer(2)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 64)\n        serial.writeBuffer(dataBuffer)\n    }\n\n\n\n    /**\n     * Set printing density (1  to 15) and break time (1 to 15)\n     * @param Density is to set printing density, eg: 10\n     * @param BreakTime is to set print break time, eg: 10\n     */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_setDensityBreakTime\" block=\"Set print density %Density| break-time %BreakTime\"\n    //% weight=58  blockExternalInputs=true blockGap=20\n    //% Density.min=1 Density.max=15\n    //% BreakTime.min=1 BreakTime.max=15\n    export function setDensityBreakTime(Density: number, BreakTime: number): void {\n        let pDensity: number\n        pDensity = Density\n        let pBT: number\n        pBT = BreakTime\n        let printSetting: number\n        printSetting = pDensity << 4\n        printSetting = printSetting | pBT\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 18) //DC2\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 10) //#\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, printSetting)\n\n        serial.writeBuffer(dataBuffer)\n    }\n\n    /**\n    * Set heating duration (4  to 255, default 80) and interval (2 to 255, default 2)\n    * @param heatTime is to set heating duration, eg: 80\n    * @param heatInterval is to set heating interval, eg: 2\n    */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_setHeating\" block=\"Set heating duration %heatTime| interval %heatInterval\"\n    //% weight=59  blockExternalInputs=true blockGap=3\n    //% heatTime.min=4 heatTime.max=255\n    //% heatInterval.min=2 heatInterval.max=255\n    export function setHeating(heatTime: number, heatInterval: number): void {\n\n        let pheatTime: number\n        pheatTime = heatTime\n        let pheatInterval: number\n        pheatInterval = heatInterval\n\n        let dataBuffer = pins.createBuffer(5)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)       //0x1B\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 55)       //0x37\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 7)        //default 64 dots\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 3, pheatTime) //default 80\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 4, pheatInterval)\n\n        serial.writeBuffer(dataBuffer)\n    }\n\n    /**\n     * Set the line spacing (default is 30)\n     * @param lineSpace is to set the line spacing, eg: 30\n     */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_lineSpace\" block=\"Set line spacing  %lineSpace\"\n    //% weight=83 blockGap=3\n    //% lineSpace.min=0 lineSpace.max=255\n    export function setLineSpacing(lineSpace: number) {\n        let pLineSpace: number\n        pLineSpace = lineSpace\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 51)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, pLineSpace)\n\n        serial.writeBuffer(dataBuffer)\n\n    }\n\n    /**\n      * Align text to left, centre or right\n      */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_textAlign\" block=\"Text align to %textAlign\"\n    //% weight=84 blockGap=3\n    export function setTextAlign(textAlign: textAlignment) {\n        let ptextAlign: number\n        ptextAlign = textAlign\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 97)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, ptextAlign)\n\n        serial.writeBuffer(dataBuffer)\n\n    }\n\n    /**\n     * Print underline.\n     */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_underLine\" block=\"Underline %underlineText\"\n    //% weight=87 blockGap=3\n    export function setUnderLine(underlineText: textunderline) {\n        let punderlineText: number\n        punderlineText = underlineText\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 45)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, punderlineText)\n\n        serial.writeBuffer(dataBuffer)\n\n    }\n\n    /**\n     * Set text background color to white/black\n     */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_backGroundColor\" block=\"Set text background to  %backgroundColor\"\n    //% weight=82 blockGap=20\n    export function backGroundColor(backgroundColor: bgColor) {\n        let pBackgroundColor: number\n        pBackgroundColor = backgroundColor\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 29)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 66)\n\n        if (pBackgroundColor === bgColor.White) {\n            dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 0)\n        } else {\n            dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 1)\n        }\n        serial.writeBuffer(dataBuffer)\n\n    }\n\n    /**\n     * Set bold On/Off\n     */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_setTextBold\" block=\"Bold %boldText\"\n    //% weight=89 blockGap=3\n    export function setTextBold(boldText: textBold) {\n        let pboldText: number\n        pboldText = boldText\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 27)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 69)\n\n        if (pboldText === textBold.Off) {\n            dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 0)\n        } else {\n            dataBuffer.setNumber(NumberFormat.UInt8LE, 2, 1)\n        }\n        serial.writeBuffer(dataBuffer)\n\n    }\n\n    /**\n     * Set Character size. Default value: 0,0\n     * @param Width is to set character width, eg: 0\n     * @param Height is to set character height, eg: 0\n     */\n    //% subcategory=Thermal-Printer \n    //% blockId=\"ThermalPrinter_setCharacterSize\" block=\"Set character size width %Width| height %Height\"\n    //% weight=85 blockExternalInputs=true blockGap=3\n    //% Width.min=0 Width.max=4\n    //% Height.min=0 Height.max=4\n    export function setCharacterSize(Width: number, Height: number): void {\n        let pWidth: number\n        pWidth = Width\n        let pHeight: number\n        pHeight = Height\n        let pSize: number\n        pSize = pWidth << 4\n        pSize = pSize | pHeight\n\n        let dataBuffer = pins.createBuffer(3)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 29)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 33)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 2, pSize)\n\n        serial.writeBuffer(dataBuffer)\n    }\n\n\n    /**\n    * Print facotry test page\n    * @param Sending line feed to the printer\n    */\n    //% subcategory=Thermal-Printer\n    //% blockId=\"ThermalPrinter_printTestPage\" block=\"Print factory test page\"\n    //% weight=10 blockGap=8\n    export function printTestPage(): void {\n        let dataBuffer = pins.createBuffer(2)\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 0, 18) //DC2\n        dataBuffer.setNumber(NumberFormat.UInt8LE, 1, 84) //T\n        serial.writeBuffer(dataBuffer)\n    }\n}"}]}],"snapshots":[{"timestamp":1732481698292,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Make thermal\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1732481850314}